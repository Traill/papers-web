{"id":"104","paper":{"title":{"text":"Phase Recovery for Sparse Signals "},"authors":[{"name":"Babak Hassibi"},{"name":"Kishore Jaganathn Samet Oymak"}],"abstr":{"text":"The problem of reconstructing a signal from measurements of the amplitude of its Fourier transform is a classic problem referred to as phase recovery and occurs in numerous applications in science and engineering. In this talk, we will assume that the underlying signal is sparse which is a very reasonable assumption in applications in astronomy, x-ray crystallography, wireless communications, etc. We first prove that, provided the support of the unknown signal is not periodic, it can be uniquely (up to time shifts and reflections) reconstructed from the magnitude of its Fourier transform. We then present a quadratic time algorithm that provides successful recovery, provided the sparsity is less $\\sqrt{n}$, where n is the length of the unknown signal. "},"body":{"text":"Consider a general communication network consisting of error-free links, each with a speciﬁed capacity with some nodes being information sources and some being information sinks. In a ﬂuid or transportation network, each commodity entering a node may only be routed onto some outgoing link. However, in information ﬂow networks, information entering a node may also be replicated or even encoded before being sent out. In fact, Ahlswede et al. [1] showed that such \u201cnetwork coding\u201d can achieve a strictly larger rate region as compared to routing, for certain networks. The question then is to characterize the rate region for network information ﬂow, and to give algorithms to construct network codes that satisfy the rate demands of all source-sink connections in a network.\nA lot of work has been done to answer these questions in the special case of a multicast connection, where every sink demands all information from every source. The maximum achievable rate was characterized in terms of the min-cut max-ﬂow bound by [1] and [2]. Cai et al. [3] showed that linear codes sufﬁce to achieve the min-cut bound, while Jaggi et al. [4] gave a polynomial time algorithm to construct linear codes for multicast. A randomized distributed approach was proposed by Ho et al. in [8] while deterministic coding\nstrategies were proposed by Fragouli et al. [9] and by Harvey et al. [10].\nFor the more general case of non-multicast connections, although several results are known, the problem predominantly remains open. Lehman et al. showed that scalar linear codes do not sufﬁce for the non-multicast case. M´edard et al. gave an example network which requires linear coding involving vectors over a ﬁnite ﬁeld. Zeger et al. gave an example network that cannot be solved using a linear code over any ﬁnite ﬁeld for any vector dimension but can be solved using a non- linear code. Reference [2] gave an algebraic formulation of the general network coding problem and showed that deciding solvability is equivalent to deciding whether a certain algebraic variety is empty or not.\nOur paper aims to provide a new formulation of the general network coding problem using a graph theoretic model. The basic idea is to note that a valid network code is essentially an assignment of states to links such that several local constraints are met. If the possible states of each link are represented using vertices, and the local constraints are represented using edges (or hyperedges) among them, then the problem of ﬁnding a network code is essentially that of ﬁnding a stable set 1 in the \u201cconﬂict hypergraph\u201d. This formulation could potentially lead to a systematic way of deciding the solvability of a network coding problem. The main strength of this formulation is that it can easily accommodate conditions such as linearity of the code, or coding only at speciﬁc nodes, by suitably modifying the conﬂict graph.\nThe idea of using a conﬂict graph to represent a problem with several local constraints has been used before in the context of a unicast switch scheduling in a Banyan network in [6], and in the context of a multicast switch in [7]. This paper extends this idea to the case when fanout splitting\nand network coding are allowed at the inputs of a crossbar multicast switch. Through an example we demonstrate that network coding strictly improves the rate region of a multicast crossbar switch. We use the conﬂict graph idea to derive an outer bound on the rate region of a general multicast crossbar with network coding.\nThe rest of the paper is organized as follows. Section II gives the formal description of the conﬂict hypergraph repre- sentation of a network coding problem along with an example. Section III contains a discussion on the pros and cons of the new formulation. In Section IV we present examples that show that network coding strictly improves the rate region of a multicast switch. We use the conﬂict graph approach to give an outer bound on the rate region. Finally, Section V gives the conclusions.\nWe use the same network model as in [2]. We are given a directed acyclic graph G = (V, A) representing the network. The conﬂict hypergraph corresponding to a network coding problem is deﬁned as follows.\nVertices: Deﬁne a set of vertices for each link in A - one vertex for each possible \u201ccomposition of information\u201d on that link. The composition of information on a link is the net transfer function from the source messages to the symbol sent on the link. For example, consider a binary linear code. The composition of information on a link refers to the set of sources which have been XORed to form the symbol on the link.\nEdges: In a valid code, more than one vertex cannot be chosen corresponding to each link. Hence we deﬁne an edge between every pair of vertices that represent the same link. Moreover, the composition on an outgoing link at any node in V is valid only if it is a function of the incoming compositions. Thus, the set of possible compositions of outgoing links becomes restricted once we specify the composition of the incoming links. This constraint is modeled using a set of hyperedges. If the composition on an outgoing link at a node is incompatible with a set of incoming input compositions, then the corresponding vertices are connected by a hyperedge.\nUnder such a construction, a selection of vertices, one corresponding to each link, gives a code. For a code to be valid, the set of vertices must form a stable set, i.e. no hyperedge may be fully covered by the chosen vertices. Thus, a valid code has a one-to-one correspondence to a stable set in which there is exactly one vertex corresponding to each link in the network. In fact, any point in the convex hull of such stable sets is achievable through time-sharing.\nFig. 1 shows an example network with a trafﬁc demand of 1 unit from s 1 to t 1 and 1 unit from s 2 to t 2 . The example is somewhat similar in structure to the example in [5]. All links have unit capacity. It is assumed that nodes with only one incoming edge simply forward whatever they receive on all outgoing links. Fig. 2 shows the corresponding conﬂict hypergraph for a scalar linear code over GF (2). The two numbers in parentheses are indicators for which of the two\nsources are present in the composition of information on that link. For instance, e 3 (1, 1) means link e 3 carries the XOR of both sources. Note that the only stable set that has a vertex corresponding to every link in the network is {e 1 (1, 0), e 2 (0, 1), e 3 (1, 1), e 4 (0, 1), e 5 (1, 0), e 6 (0, 1)}. This gives a valid code with nodes v 1 , v 3 and v 5 XORing their inputs while the other nodes simply forward the incoming information. The given network is thus solvable over GF (2).\nThe conﬂict graph approach gives a systematic method to ﬁnd a valid code. Deciding whether a network coding problem has a solution over a given alphabet and class of codes can be reduced to ﬁnding whether the conﬂict hypergraph has a stable set that has exactly one representative vertex for every link in the network. Since the overall problem is represented in terms of local constraints (hyperedges involve only vertices corresponding to links at the same node), the representation scales with the size of the network. The other main advantage of this approach is the ﬂexibility it offers to impose extra constraints on the problem. For instance, if we want to ﬁnd a solution with network coding only at certain nodes in the network, then we can modify the conﬂict graph accordingly by\nrestricting the output composition vertices at the other nodes, and choose a stable set in the resulting hypergraph.\nA potential problem with this approach is that the size of the conﬂict graph may not scale well with the ﬁeld size used even for linear codes, since the number of possible compositions on a link grows exponentially with the ﬁeld size. Also, the general problem of ﬁnding a stable set with the required properties may be a hard one in some cases. Structural properties of the conﬂict graph will have to be utilized to simplify the task of ﬁnding such a stable set. This is part of future work.\nThis section aims to demonstrate the application of the conﬂict graph idea in the context of a crossbar multicast switch. First we summarize the result given in [7]. Then we describe examples to show the beneﬁt of network coding in the switch, in terms of the rate region. Finally, we use the conﬂict graph idea to derive an outer bound on the rate region of a general multicast crossbar switch with intra-session network coding.\nThe result in [7] gives a graph theoretic characterization of the rate region of a multicast crossbar switch, under the assumption that fanout splitting 2 is not allowed. The basic idea is to represent the multicast trafﬁc pattern in the switch using a conﬂict graph. A trafﬁc pattern consists of several multicast ﬂows. (The term \u201cﬂow\u201d will be used to denote any set of packets with the same input and same set of destinations in the switch) Each ﬂow in the switch is represented by a vertex in the conﬂict graph, and two vertices are connected by an edge, if the corresponding ﬂows cannot be scheduled simultaneously in the switch. This could be due to a conﬂict on the input or the output side. Under this model, a valid switch conﬁguration corresponds to a stable set (a set of vertices, no two of which are connected to each other) in the conﬂict graph. Any switch schedule can be viewed as a time sharing between valid switch conﬁgurations. In the conﬂict graph picture, this corresponds to a convex combination of stable sets. As a result, the achievable rate region with no fanout splitting is the stable set polytope of the conﬂict graph.\nIn this section, we wish to understand whether network cod- ing improves the achievable rate region. By network coding, we mean that the inputs of the switch are allowed to code over the packets that are waiting in the queue. We present an example to show that network coding, even when restricted to packets of the same ﬂow, can improve the rate region.\nConsider the trafﬁc pattern T shown in Fig. 3. This is a 3 × 3 switch, with 4 ﬂows \u2013 one multicast ﬂow from input 1 to all 3 outputs, and 3 unicast ﬂows from input 2 to outputs 1, 2 and 3 respectively. The rates of the 4 ﬂows are set at 2 3 ,\nThis trafﬁc pattern cannot be served without fanout splitting. The reason is as follows. The unicasts cannot be served while the multicast is being served. If the multicast ﬂow occupies\ntwo-thirds of the schedule, that leaves only one third of the time for the three unicasts. But each unicast needs a rate of 1 3 . This cannot be achieved since they cannot be served simultaneously.\nThis trafﬁc pattern cannot be achieved even when fanout splitting is allowed. To show this, we note that at all times in the schedule, one of the unicasts from input 2 has to be served, since it is a saturated input (i.e. the total inﬂow is 1). Hence, in any time slot, the multicast packet can be sent to at most 2 outputs. Thus, for every packet, there has to be at least one more time slot where it is sent to the output(s) that have not received it. In other words, every packet of the multicast ﬂow will use up at least 2 time slots, implying that a rate of more than 1 2 is not achievable. Since the required rate is 2 3 , fanout splitting cannot achieve the given trafﬁc pattern.\nHowever, the trafﬁc pattern in Fig. 3 can be achieved if intra-ﬂow network coding and fanout splitting are allowed. In fact, a code over the binary ﬁeld is sufﬁcient. This is explained next.\nThe network code involves coding at input 1, over packets only from the multicast ﬂow. Input 1 codes over blocks of 2 packets, and sends them over 3 time slots. For instance, consider a block of packets {P 1 , P 2 } from the multicast ﬂow. The packets in a block are coded in various ways, and sent to different combinations of outputs, in each time slot. The code is described in Table I. All operations are over GF (2). The ⊕ sign indicates that the packets are XORed bitwise and sent.\nIt can be veriﬁed that this code enables each of the three destinations to decode both packets in the block, at the end of 3 time slots. For instance, output 1 receives P 1 and P 1 ⊕ P 2 . From these, P 1 and P 2 can be recovered. Thus, each output receives 2 packets of the multicast ﬂow, every 3 slots. This\nAs for the unicast ﬂows, they are also served in these time slots, in parallel. Note that, input 1 talks to only 2 outputs at any given time (column 3 of the table). Input 2 uses this fact to send a unicast packet to the third unoccupied output. For instance, input 2 can talk to output 3 in time slot 1. In this manner, input 2 conveys one unicast packet to each output in every 3 slots. Thus, a rate of 1 3 is achieved for each of the unicasts. In other words, the given code satisﬁes all the rate requirements of the example.\nWhereas the above example shows that intra-session coding improves the rate region, we now present another example trafﬁc pattern that requires inter-ﬂow coding to be satisﬁed. This example is in a 2 × 4 switch, with 5 multicast ﬂows. The ﬂows are described in Table II. The required rate for each ﬂow\nIn any schedule that achieves a rate of 1 3 for each of these ﬂows, it is easily seen that the last 3 ﬂows have to be served at different times (since they are from the same input), and their fanout cannot be split. If inter-ﬂow coding is not allowed, then it is not possible to accommodate the ﬁrst two ﬂows into this schedule since that would require input 1 to send out information from two different ﬂows at once. However, if inter-ﬂow coding is allowed, then the required rate can be achieved. The schedule that achieves the required rate is shown in Table III. In this table, P i denotes the packet of the i th ﬂow in Table II.\nC. An Outer Bound on the Rate Region of a General Multicast Switch\nTo derive an outer bound on the rate region of a general multicast switch with fanout splitting and intra-ﬂow network coding, we deﬁne the enhanced conﬂict graph as follows. If fanout splitting is allowed, then, one possible approach is to think of a multicast ﬂow as being made up of several sub- ﬂows. Hence, for a multicast ﬂow with a fanout of size f , deﬁne f vertices, one for each sub-ﬂow. Conﬂict edges are deﬁned between every pair of sub-ﬂows originating at the same\ninput or terminating at the same output, except that sub-ﬂows belonging to the same ﬂow are not connected to each other.\nTheorem 1: The stable set polytope of the enhanced conﬂict graph (suitably projected from sub-ﬂows to ﬂows) 4 is an outer bound on the rate region with fanout splitting and intra-ﬂow network coding.\nProof: Let r be any achievable rate vector with one entry for each ﬂow. Let r\u2019 be the corresponding rate vector with one entry for each sub-ﬂow \u2013 where all entries for sub- ﬂows of the same ﬂow are equal to the rate of that ﬂow in r. Since r is within the rate region, there exists a schedule that achieves it. In other words, there is a sequence of switch conﬁgurations and associated codes for each time slot in the schedule such that the average over time of the rate served for each sub-ﬂow equals the required rate for the corresponding ﬂow. More formally, given the achieving schedule, deﬁne an indicator vector in each time slot, with one entry for each sub-ﬂow. This entry has a 1 for those sub-ﬂows in which a new degree of freedom is conveyed by the code in that time slot. Then r\u2019 is the time average of such indicator vectors over all the time slots. But then, each indicator vector is the incidence vector of some stable set of the enhanced conﬂict graph. Thus, any achievable rate vector can be expressed as a convex combination of stable sets of the enhanced conﬂict graph, and this proves the theorem.\nFor any multicast trafﬁc pattern, a trivial outer bound on the rate region is that the total rate of all ﬂows destined for any output in the switch must be at most 1. This condition is called the admissibility condition. It is interesting to note that there are trafﬁc patterns that are admissible, but cannot be achieved even with inter-ﬂow network coding in a multicast switch. One such example is given here. Consider the trafﬁc pattern shown in Fig. 4. Clearly, no output is oversubscribed and therefore, the pattern is within the admissible region. However, this trafﬁc pattern cannot be supported even if inter- ﬂow network coding is allowed. To show this, we ﬁrst note that if fanout splitting is not allowed, then after serving the multicast ﬂow, we have only 1 3 time for the two unicast ﬂows from input 2. But these ﬂows require a rate of 1 3 each, which cannot be supported since they themselves are in conﬂict. Now, suppose fanout splitting is allowed. Even then, the multicast ﬂow can never be split, since input 1 is saturated and splitting the multicast ﬂow will not allow enough time to serve all the incoming ﬂow at input 1. This problem remains even if intra-ﬂow network coding is allowed. Note that, no input has 2 ﬂows going to the same output. Hence, coding across any two different ﬂows at an input will \u201cpoison\u201d both ﬂows, with some unnecessary ﬂow\u2019s packet. To undo the poisoning, extra time has to be spent to send a \u201cremedy\u201d. But, since the outputs are already saturated, there is no time for a remedy ﬂow to be sent. Therefore, inter-ﬂow network coding will also\nnot help. The problem here is that, even if we allow coding across ﬂows, we are still restricted to code only over ﬂows at the same input. This example implies that although network coding does improve the rate region, it cannot achieve the entire admissible region. Reference [11] gives an example of an admissible trafﬁc pattern that cannot be achieved even with fanout splitting. In the same example, even if network coding is allowed in addition to fanout splitting, the trafﬁc cannot be served. Hence, this is yet another example for the fact there are admissible trafﬁc patterns that cannot be sustained even with network coding.\nIn this paper we have introduced a new graph-theoretic formulation of the non-multicast network coding problem using the concept of conﬂict graphs. This formulation could provide a systematic approach to the problem of deciding solvability of a given network, over a given ﬁeld and a given class of codes. The approach has its own pros and cons. In particular, it can easily incorporate extra constraints on the problem by suitably modifying the conﬂict graph.\nWe have also demonstrated the use of the conﬂict graph idea in the context of a multicast crossbar switch. We have shown that allowing network coding at the inputs of a crossbar switch can provide beneﬁts in the rate region and have derived an outer bound on the general rate region when fanout splitting and network coding are allowed using the conﬂict graph.\nThis work is supported by the following grants: NSF Career grant CCR-0093349, NSF ITR grant CCR-032595-1, ONR\ngrants N00014-05-1 and N00014-05-0197, and the AFOSR contract titled \u201cRobust Self-Authenticating Network Coding\u201d."},"refs":[{"authors":[{"name":"R. Ahlswede"},{"name":"N. Cai"},{"name":"S.-Y. R. Li"},{"name":"R. W. Yeung"}],"title":{"text":"Network informa- tion ﬂow"}},{"authors":[{"name":"R. Koetter"},{"name":"M. M´edard"}],"title":{"text":"An Algebraic Approach to Network Coding"}},{"authors":[{"name":"S.-Y. R. Li"},{"name":"R. W. Yeung"}],"title":{"text":"Linear network coding"}},{"authors":[{"name":"S. Jaggi"},{"name":"P. Sanders"},{"name":"P. A. Chou"},{"name":"M. Effros"},{"name":"S. Egner"},{"name":"K. Jain"},{"name":"L. Tolhuizen"}],"title":{"text":"Polynomial time algorithms for multicast network code construction"}},{"authors":[{"name":"S. Riis"}],"title":{"text":"Linear versus Non-Linear Boolean functions in Network Flow"}},{"authors":[{"name":"C. Caramanis"},{"name":"M. Rosenblum"},{"name":"M. X. Goemans"},{"name":"V. Tarokh"}],"title":{"text":"Scheduling Algorithms for Providing Flexible, Rate-Based, Quality of Service Guarantees for Packet-Switching in Banyan Networks"}},{"authors":[{"name":"J. Sundararajan"},{"name":"S. Deb"},{"name":"M. M´edard"}],"title":{"text":"Extending the Birkhoff-von Neumann Switching Strategy to Multicast Switches"}},{"authors":[{"name":"T. Ho"},{"name":"M. M´edard"},{"name":"J. Shi"},{"name":"M. Effros"},{"name":"D. R. Karger"}],"title":{"text":"On Randomized Network Coding"}},{"authors":[{"name":"C. Fragouli"},{"name":"E. Soljanin"}],"title":{"text":"Decentralized Network Coding"}},{"authors":[{"name":"N. Harvey"},{"name":"D. R. Karger"}],"title":{"text":"Deterministic Network Coding by Matrix Completion"}},{"authors":[{"name":"M. A. Marsan"},{"name":"A. Bianco"},{"name":"P. Giaccone"},{"name":"E. Leonardi"}],"title":{"text":"Multicast trafﬁc in input-queued switches: optimal scheduling and maximum throughput."}}]},"file":{"jsonClass":"File","file":"/home/arnfred/Code/trailhead/resources/ita2013/104"},"links":[{"id":"205","weight":9},{"id":"2760","weight":2},{"id":"1486","weight":3},{"id":"2741","weight":10},{"id":"3180","weight":12},{"id":"67","weight":4},{"id":"2206","weight":3},{"id":"1606","weight":7},{"id":"153","weight":22},{"id":"3037","weight":4},{"id":"93","weight":6},{"id":"436","weight":5},{"id":"3191","weight":4},{"id":"12","weight":3},{"id":"223","weight":5},{"id":"1547","weight":5},{"id":"2254","weight":12},{"id":"1278","weight":20},{"id":"2287","weight":10},{"id":"3200","weight":3},{"id":"3008","weight":13},{"id":"3083","weight":2},{"id":"2217","weight":5},{"id":"3010","weight":7},{"id":"3222","weight":3},{"id":"2291","weight":7},{"id":"307","weight":7},{"id":"981","weight":10},{"id":"1430","weight":5},{"id":"3021","weight":9},{"id":"170","weight":5},{"id":"3199","weight":8},{"id":"813","weight":3},{"id":"3069","weight":5},{"id":"2634","weight":2},{"id":"526","weight":16},{"id":"2442","weight":5},{"id":"175","weight":4},{"id":"362","weight":4},{"id":"2763","weight":6},{"id":"2534","weight":2},{"id":"135","weight":2},{"id":"404","weight":3},{"id":"702","weight":3},{"id":"450","weight":9},{"id":"770","weight":4},{"id":"3165","weight":8},{"id":"1082","weight":7},{"id":"1889","weight":4},{"id":"762","weight":5},{"id":"3154","weight":2},{"id":"2002","weight":5},{"id":"3065","weight":4},{"id":"3195","weight":7},{"id":"284","weight":3},{"id":"3218","weight":7},{"id":"1060","weight":6},{"id":"3132","weight":2},{"id":"1160","weight":6},{"id":"3187","weight":8},{"id":"475","weight":3},{"id":"944","weight":3},{"id":"3137","weight":3},{"id":"3059","weight":5},{"id":"2646","weight":4},{"id":"236","weight":15},{"id":"117","weight":7},{"id":"273","weight":5},{"id":"3111","weight":6},{"id":"1442","weight":8},{"id":"2745","weight":6},{"id":"2276","weight":7},{"id":"2352","weight":9},{"id":"3176","weight":8},{"id":"3255","weight":6},{"id":"470","weight":7},{"id":"1643","weight":8},{"id":"250","weight":7},{"id":"3036","weight":6},{"id":"26","weight":23},{"id":"2455","weight":3},{"id":"1298","weight":3},{"id":"3175","weight":4},{"id":"3201","weight":13},{"id":"2830","weight":3},{"id":"3135","weight":4},{"id":"3049","weight":3},{"id":"1479","weight":27},{"id":"1215","weight":10},{"id":"107","weight":6},{"id":"1473","weight":6},{"id":"217","weight":3},{"id":"1462","weight":4},{"id":"13","weight":3},{"id":"3038","weight":6},{"id":"1996","weight":5},{"id":"325","weight":2},{"id":"1458","weight":3},{"id":"2025","weight":5},{"id":"973","weight":5},{"id":"1279","weight":2},{"id":"2119","weight":3},{"id":"1436","weight":5},{"id":"155","weight":2},{"id":"1877","weight":11},{"id":"1559","weight":7},{"id":"3186","weight":9},{"id":"3072","weight":3},{"id":"306","weight":10},{"id":"1121","weight":6},{"id":"3057","weight":3},{"id":"3068","weight":8},{"id":"3164","weight":7},{"id":"1107","weight":4},{"id":"2697","weight":4},{"id":"398","weight":8},{"id":"152","weight":3},{"id":"2750","weight":3},{"id":"1421","weight":9},{"id":"3105","weight":8},{"id":"2178","weight":7},{"id":"72","weight":7},{"id":"1866","weight":3},{"id":"3233","weight":5},{"id":"2488","weight":9},{"id":"3116","weight":8},{"id":"900","weight":5},{"id":"59","weight":4},{"id":"353","weight":2},{"id":"1846","weight":3},{"id":"1074","weight":4},{"id":"3168","weight":11},{"id":"1136","weight":6},{"id":"2751","weight":4},{"id":"1103","weight":7},{"id":"3157","weight":6},{"id":"2317","weight":16},{"id":"3127","weight":6},{"id":"572","weight":7},{"id":"76","weight":4},{"id":"419","weight":2},{"id":"372","weight":4},{"id":"138","weight":3},{"id":"3073","weight":9},{"id":"54","weight":3},{"id":"628","weight":3},{"id":"408","weight":7},{"id":"3005","weight":10},{"id":"1696","weight":8},{"id":"1212","weight":16},{"id":"487","weight":3},{"id":"508","weight":2},{"id":"65","weight":4},{"id":"3027","weight":19},{"id":"1096","weight":3},{"id":"71","weight":4},{"id":"642","weight":7},{"id":"3196","weight":7},{"id":"2033","weight":3},{"id":"1830","weight":10},{"id":"108","weight":3},{"id":"691","weight":11},{"id":"2740","weight":3},{"id":"1443","weight":5},{"id":"3202","weight":4},{"id":"2812","weight":15},{"id":"3243","weight":10},{"id":"2188","weight":7},{"id":"3134","weight":4},{"id":"1365","weight":6},{"id":"445","weight":15},{"id":"3185","weight":8},{"id":"1671","weight":18},{"id":"1325","weight":13},{"id":"1844","weight":3},{"id":"219","weight":3},{"id":"2174","weight":3},{"id":"3001","weight":3},{"id":"2759","weight":8},{"id":"2319","weight":6},{"id":"431","weight":7},{"id":"676","weight":5},{"id":"82","weight":17},{"id":"1376","weight":2},{"id":"1448","weight":3},{"id":"3056","weight":6},{"id":"1","weight":6},{"id":"2617","weight":5},{"id":"2435","weight":10},{"id":"3174","weight":14},{"id":"1499","weight":3},{"id":"1840","weight":7},{"id":"1988","weight":5},{"id":"1908","weight":21},{"id":"2884","weight":8},{"id":"771","weight":6},{"id":"3088","weight":12},{"id":"25","weight":7},{"id":"658","weight":5},{"id":"2743","weight":4},{"id":"687","weight":4},{"id":"230","weight":4},{"id":"3123","weight":13},{"id":"309","weight":2},{"id":"2773","weight":4},{"id":"31","weight":4},{"id":"503","weight":3},{"id":"3163","weight":6},{"id":"1439","weight":12},{"id":"278","weight":2},{"id":"764","weight":8},{"id":"3113","weight":2},{"id":"1444","weight":3},{"id":"887","weight":4},{"id":"1109","weight":4},{"id":"1438","weight":2},{"id":"264","weight":3},{"id":"257","weight":11},{"id":"3030","weight":6},{"id":"694","weight":5},{"id":"1573","weight":3},{"id":"203","weight":3},{"id":"525","weight":4},{"id":"1847","weight":2},{"id":"3205","weight":6},{"id":"1509","weight":2},{"id":"3108","weight":2},{"id":"1836","weight":10},{"id":"115","weight":3},{"id":"1822","weight":3},{"id":"275","weight":4},{"id":"376","weight":2},{"id":"308","weight":10},{"id":"2838","weight":12},{"id":"3197","weight":5},{"id":"293","weight":10},{"id":"630","weight":2},{"id":"767","weight":11},{"id":"354","weight":4},{"id":"2939","weight":4},{"id":"1076","weight":27},{"id":"430","weight":6},{"id":"1915","weight":5},{"id":"1233","weight":16},{"id":"641","weight":4},{"id":"3189","weight":3},{"id":"575","weight":3},{"id":"831","weight":3},{"id":"2862","weight":6},{"id":"402","weight":11},{"id":"371","weight":2},{"id":"2443","weight":2},{"id":"1084","weight":10},{"id":"2729","weight":9},{"id":"423","weight":5},{"id":"2316","weight":3},{"id":"3156","weight":7},{"id":"1883","weight":3},{"id":"1055","weight":3},{"id":"1102","weight":6},{"id":"2173","weight":6},{"id":"2753","weight":9},{"id":"1517","weight":7},{"id":"198","weight":2},{"id":"1319","weight":8},{"id":"699","weight":3},{"id":"506","weight":22},{"id":"187","weight":5},{"id":"165","weight":5},{"id":"2255","weight":2},{"id":"1627","weight":14},{"id":"1528","weight":6},{"id":"705","weight":13},{"id":"621","weight":3},{"id":"3070","weight":4},{"id":"1503","weight":6},{"id":"438","weight":5},{"id":"3181","weight":20},{"id":"1546","weight":3},{"id":"3198","weight":2},{"id":"2778","weight":2},{"id":"1098","weight":6},{"id":"1861","weight":4},{"id":"220","weight":7},{"id":"660","weight":5},{"id":"183","weight":2},{"id":"688","weight":5},{"id":"3129","weight":2},{"id":"3169","weight":3},{"id":"982","weight":4},{"id":"1930","weight":3},{"id":"288","weight":3},{"id":"3133","weight":5},{"id":"1553","weight":6},{"id":"3184","weight":6},{"id":"3044","weight":7},{"id":"3170","weight":5},{"id":"485","weight":12},{"id":"3193","weight":3},{"id":"2738","weight":3},{"id":"240","weight":5},{"id":"1166","weight":2},{"id":"1550","weight":5},{"id":"211","weight":2},{"id":"782","weight":2},{"id":"3125","weight":2},{"id":"2495","weight":2},{"id":"420","weight":2},{"id":"323","weight":8},{"id":"74","weight":2},{"id":"1456","weight":4},{"id":"243","weight":5},{"id":"1231","weight":2},{"id":"1214","weight":28},{"id":"1083","weight":12},{"id":"3114","weight":10},{"id":"1434","weight":20},{"id":"1871","weight":2},{"id":"3188","weight":3},{"id":"643","weight":2},{"id":"3166","weight":10},{"id":"449","weight":21},{"id":"377","weight":21},{"id":"424","weight":14},{"id":"3029","weight":13},{"id":"3151","weight":7},{"id":"2146","weight":24},{"id":"2638","weight":9},{"id":"2315","weight":2},{"id":"1423","weight":15},{"id":"1680","weight":31},{"id":"3208","weight":2},{"id":"370","weight":4},{"id":"2299","weight":12},{"id":"2309","weight":7},{"id":"1258","weight":7},{"id":"2288","weight":3},{"id":"2340","weight":2},{"id":"2038","weight":7},{"id":"2448","weight":3},{"id":"752","weight":5},{"id":"1393","weight":22},{"id":"1300","weight":2},{"id":"3162","weight":4}],"meta":{"jsonClass":"Map$Map3","room":"The Tookan","date":"1360668000000","session":"3"},"cluster":{"jsonClass":"Map$EmptyMap$"}}
